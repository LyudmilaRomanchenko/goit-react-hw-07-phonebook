{"version":3,"sources":["components/Phonebook.module.css","components/ContactElement/ContactElement.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactElement/ContactElement.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactElement","id","name","number","deleteContact","className","s","button","type","onClick","prototype","PropTypes","string","isRequired","func","checkPropTypes","addContactsRequest","createAction","addContactsSuccsess","addContactsError","deleteContactsRequest","deleteContactsSuccsess","deleteContactsError","fetchContactsRequest","fetchContactsSuccsess","fetchContactsError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","a","get","data","addContact","contact","post","contactId","delete","error","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLocaleLowerCase","includes","ContactList","useSelector","contactsSelectors","useDispatch","contactsOperations","useEffect","list","map","item","ContactForm","useState","setName","setNumber","handleChange","e","currentTarget","value","onSubmit","preventDefault","find","alert","lableContact","inputContact","onChange","pattern","title","required","arrayOf","shape","Filter","findLable","App","container","phonebookContainer","contactsContainer","createReducer","payload","initialState","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","console","log","logger","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f117fea2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Phonebook_container__yuqd0\",\"phonebookContainer\":\"Phonebook_phonebookContainer__2dE-z\",\"contactsContainer\":\"Phonebook_contactsContainer__37GKm\",\"list\":\"Phonebook_list__1awkP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"ContactElement_number__2IjIg\",\"button\":\"ContactElement_button__2v0M8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2s3aW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findLable\":\"Filter_findLable__2s361\",\"find\":\"Filter_find__3EHpz\"};","import s from \"./ContactElement.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactElement({ id, name, number, deleteContact }) {\n  return (\n    <p>\n      <span>{name}:</span>\n      <span className={s.number}>{number}</span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </p>\n  );\n}\n\nContactElement.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactElement);\n\nexport default ContactElement;\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const addContactsRequest = createAction(\"contacts/addContactsRequest\");\r\nexport const addContactsSuccsess = createAction(\"contacts/addContactsSuccsess\");\r\nexport const addContactsError = createAction(\"contacts/addContactsError\");\r\n\r\nexport const deleteContactsRequest = createAction(\r\n  \"contacts/deleteContactsRequest\"\r\n);\r\nexport const deleteContactsSuccsess = createAction(\r\n  \"contacts/deleteContactsSuccsess\"\r\n);\r\nexport const deleteContactsError = createAction(\"contacts/deleteContactsError\");\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactsRequest\"\r\n);\r\nexport const fetchContactsSuccsess = createAction(\r\n  \"contacts/fetchContactsSuccsess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\n// const addContact = createAction(\"contact/add\", (name, number) => ({\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// }));\r\n\r\n// const deleteContact = createAction(\"contacts/delete\");\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n\r\n// Без toolkit\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n// import types from \"./types\";\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (conactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: conactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from \"axios\";\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccsess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccsess,\r\n  deleteContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccsess,\r\n  fetchContactsError,\r\n} from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccsess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => async (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactsSuccsess(data));\r\n  } catch (error) {\r\n    dispatch(addContactsError(error));\r\n  }\r\n\r\n  //   axios\r\n  //     .post(\"/contacts\", contact)\r\n  //     .then(({ data }) => dispatch(addContactsSuccsess(data)))\r\n  //     .catch((error) => dispatch(addContactsError(error)));\r\n};\r\n\r\nexport const deleteContact = (contactId) => async (dispatch) => {\r\n  dispatch(deleteContactsRequest());\r\n\r\n  try {\r\n    axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactsSuccsess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactsError(error));\r\n  }\r\n};\r\n\r\n// export default { addContact, fetchContacts, deleteContact };\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLocaleLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport ContactElement from \"../ContactElement\";\nimport s from \"./ContactList.module.css\";\n// import actions from \"../../redux/actions\";\n// import { getVisibleContacts } from \"../../redux/selectors\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\n\nfunction ContactList() {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const dispatch = useDispatch();\n  const deleteContact = (id) => dispatch(contactsOperations.deleteContact(id));\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <ContactElement\n            id={id}\n            name={name}\n            number={number}\n            deleteContact={deleteContact}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactList);\n\n// Без toolkit\n\n// import { connect } from \"react-redux\";\n// import PropTypes from \"prop-types\";\n// import ContactElement from \"../ContactElement\";\n// import s from \"./ContactList.module.css\";\n// import actions from \"../../redux/actions\";\n\n// function ContactList({ contacts, deleteContact }) {\n//   console.log(contacts);\n//   return (\n//     <ul className={s.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id} className={s.item}>\n//           <ContactElement\n//             id={id}\n//             name={name}\n//             number={number}\n//             deleteContact={deleteContact}\n//           />\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// function getVisibleContacts(contacts, filter) {\n//   const normalizedFilter = filter.toLocaleLowerCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter)\n//   );\n// }\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => {\n//   console.log(filter);\n//   return {\n//     contacts: getVisibleContacts(items, filter),\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   deleteContact: (id) => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n// ContactList.prototype = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.number.isRequired,\n\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// PropTypes.checkPropTypes(ContactList);\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport s from \"./ContactForm.module.css\";\nimport PropTypes from \"prop-types\";\n// import actions from \"../../redux/contacts/contacts-actions\";\n// import { getContacts } from \"../../redux/contacts/contacts-selectors\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\n\nfunction ContactForm() {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n  const addContact = (name, number) =>\n    dispatch(contactsOperations.addContact(name, number));\n\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (e) => {\n    if (e.currentTarget.name === \"name\") {\n      setName(e.currentTarget.value);\n    }\n\n    if (e.currentTarget.name === \"number\") {\n      setNumber(e.currentTarget.value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const isContactsIncludes = contacts.find(\n      (contact) => contact.name === name\n    );\n\n    if (isContactsIncludes) {\n      return alert(`${name} is alredy in contacts`);\n    } else {\n      addContact(name, number);\n      setName(\"\");\n      setNumber(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.lableContact}>\n        Name\n        <input\n          className={s.inputContact}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className={s.lableContact}>\n        Number\n        <input\n          className={s.inputContact}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n  addContact: PropTypes.func.isRequired,\n};\n\n// Без toolkit\n\n// import { useState } from \"react\";\n// import { connect} from \"react-redux\";\n// import s from \"./ContactForm.module.css\";\n// import PropTypes from \"prop-types\";\n// import actions from \"../../redux/actions\";\n\n// function ContactForm({ addContact, contacts }) {\n//   const [name, setName] = useState(\"\");\n//   const [number, setNumber] = useState(\"\");\n\n//   const handleChange = (e) => {\n\n//     if (e.currentTarget.name === \"name\") {\n//       setName(e.currentTarget.value);\n//     }\n\n//     if (e.currentTarget.name === \"number\") {\n//       setNumber(e.currentTarget.value);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const isContactsIncludes = contacts.find(\n//       (contact) => contact.name === name\n//     );\n\n//     if (isContactsIncludes) {\n//       return alert(`${name} is alredy in contacts`);\n//     } else {\n//       addContact(name, number);\n//       setName(\"\");\n//       setNumber(\"\");\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label className={s.lableContact}>\n//         Name\n//         <input\n//           className={s.inputContact}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={handleChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//       </label>\n\n//       <label className={s.lableContact}>\n//         Number\n//         <input\n//           className={s.inputContact}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={handleChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//         />\n//       </label>\n\n//       <button className={s.button} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   addContact: (name, number) => dispatch(actions.addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// ContactForm.prototype = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.number.isRequired,\n//     }).isRequired\n//   ),\n//   addContact: PropTypes.func.isRequired,\n// };\n","// import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport s from \"./Filter.module.css\";\nimport { changeFilter } from \"../../redux/contacts/contacts-actions\";\n// import { getFilter } from \"../../redux/selectors\";\nimport { contactsSelectors } from \"../../redux/contacts\";\n\nfunction Filter() {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n  const onChange = (e) => dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <label className={s.findLable}>\n      Find contacts by name\n      <input\n        className={s.find}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n}\n\nexport default Filter;\n\nFilter.prototype = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(Filter);\n\n// Без toolkit\n// import PropTypes from \"prop-types\";\n// import { connect} from \"react-redux\";\n// import s from \"./Filter.module.css\";\n// import actions from \"../../redux/actions\";\n\n// function Filter({ value, onChange }) {\n//   console.log(value);\n//   return (\n//     <label className={s.findLable}>\n//       Find contacts by name\n//       <input\n//         className={s.find}\n//         type=\"text\"\n//         value={value}\n//         onChange={onChange}\n//       ></input>\n//     </label>\n//   );\n// }\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (e) => dispatch(actions.changeFilter(e.currentTarget.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// Filter.prototype = {\n//   filter: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// PropTypes.checkPropTypes(Filter);\n","// import \"./App.css\";\n// import contacts from \"./contacts.json\";\nimport ContactList from \"./ContactList\";\nimport ContactForm from \"./ContactForm\";\nimport Filter from \"./Filter\";\nimport s from \"./Phonebook.module.css\";\n\nfunction App() {\n  return (\n    <div className={s.container}>\n      <div className={s.phonebookContainer}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n\n      <div className={s.contactsContainer}>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport {\r\n  addContactsSuccsess,\r\n  deleteContactsSuccsess,\r\n  fetchContactsSuccsess,\r\n  changeFilter,\r\n} from \"./contacts-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccsess]: (state, { payload }) => payload,\r\n  [addContactsSuccsess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactsSuccsess]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst initialState = combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\nexport default initialState;\r\n\r\n// Без toolkit\r\n// import { combineReducers } from \"redux\";\r\n// import actions from \"./actions\";\r\n// import types from \"./types\";\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const initialState = combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n\r\n// export default initialState;\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n// import { createStore, combineReducers } from \"redux\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport contacts from \"./contacts/contacts-reducer\";\r\n\r\nconst myMiddleWare = (store) => (next) => (action) => {\r\n  console.log(\"Моя прослойка\", action);\r\n\r\n  next(action);\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  myMiddleWare,\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contacts,\r\n  },\r\n  middleware,\r\n  // указываем, что devtools нужны только при разработке\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n\r\n// Без toolkit\r\n// import { createStore, combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import contacts from \"./reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contacts,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n\r\n// console.log(rootReducer);\r\n// console.log(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lableContact\":\"ContactForm_lableContact__2kzKW\",\"inputContact\":\"ContactForm_inputContact__2w5km\",\"button\":\"ContactForm_button__1a33m\"};"],"sourceRoot":""}